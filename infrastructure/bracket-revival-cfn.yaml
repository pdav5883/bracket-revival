Parameters:
  AcmSSLCertificateId:
    Type: String
  HostedZoneId:
    Type: String
  DeployedRootURL:
    Type: String
  LambdaReadWritePermissionName:
    Type: String
  LambdaReadPermissionName:
    Type: String
  LambdaPublishPermissionName:
    Type: String
  LambdaReadSendPermissionName:
    Type: String
  LambdaSendPermissionName:
    Type: String
  LambdaUserAuthPermissionName:
    Type: String
  LambdaAdminEditPermissionName:
    Type: String
  PublicBucketName:
    Type: String
  PrivateBucketName:
    Type: String
  LambdaAddElementName:
    Type: String
  LambdaAdminEditName:
    Type: String
  LambdaGetBracketName:
    Type: String
  LambdaGetCompetitionsName:
    Type: String
  LambdaGetRoundStartName:
    Type: String
  LambdaGetScoreboardName:
    Type: String
  LambdaSendEmailName:
    Type: String
  LambdaUpdatePicksName:
    Type: String
  LambdaUpdateScoreboardName:
    Type: String
  LambdaUserAuthName:
    Type: String
  LayerCommonName:
    Type: String
  SNSTopicEmailName:
    Type: String
  SNSTopicSyncName:
    Type: String
  ApiName:
    Type: String
  SesIdentity:
    Type: String
  CognitoUserPoolName:
    Type: String
  CognitoUserPoolId:
    Type: String
  CognitoAdminGroupName:
    Type: String
Outputs:
  CloudFrontDistroId:
    Value: !Ref CloudFrontDistroBracket
  ApiId:
    Value: !Ref ApiGatewayBracket
  SyncTopicArn:
    Value: !GetAtt SNSTopicBracketSync.TopicArn
  EmailTopicArn:
    Value: !GetAtt SNSTopicBracketEmail.TopicArn
  UserPoolId:
    Value: !Ref CognitoBLRUserPool
  UserPoolClientId:
    Value: !Ref CognitoBLRUserPoolClient
Resources:
############################
##### Lambda 
############################
  LambdaBracketAddElement:
    Type: "AWS::Lambda::Function"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !Ref LambdaAddElementName
      MemorySize: 128
      Description: ""
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 3
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "lambda_function.lambda_handler"
      Code:
        ZipFile: |
          def lambda_handler(event, context):
                # upload code via lambda deploy script
                return False
      Layers:
        - !Ref LayerBracketCommon
      Role: !GetAtt RoleBracketReadWrite.Arn 
      FileSystemConfigs: []
      Runtime: "python3.12"
      PackageType: "Zip"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: !Ref LogBracketLambdaAddElement
      EphemeralStorage:
        Size: 512
      Architectures:
      - "x86_64"
  LambdaBracketAdminEdit:
    Type: "AWS::Lambda::Function"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !Ref LambdaAdminEditName
      MemorySize: 128
      Description: ""
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 3
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "lambda_function.lambda_handler"
      Code:
        ZipFile: |
          def lambda_handler(event, context):
                # upload code via lambda deploy script
                return False
      Layers:
        - !Ref LayerBracketCommon
      Role: !GetAtt RoleBracketAdminEdit.Arn 
      FileSystemConfigs: []
      Runtime: "python3.12"
      PackageType: "Zip"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: !Ref LogBracketLambdaAdminEdit
      EphemeralStorage:
        Size: 512
      Architectures:
      - "x86_64"
  LambdaBracketGetBracket:
    Type: "AWS::Lambda::Function"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !Ref LambdaGetBracketName
      MemorySize: 128
      Description: ""
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 3
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "lambda_function.lambda_handler"
      Code:
        ZipFile: |
          def lambda_handler(event, context):
                # upload code via lambda deploy script
                return False
      Layers:
        - !Ref LayerBracketCommon
      Role: !GetAtt RoleBracketRead.Arn 
      FileSystemConfigs: []
      Runtime: "python3.12"
      PackageType: "Zip"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: !Ref LogBracketLambdaGetBracket
      EphemeralStorage:
        Size: 512
      Architectures:
      - "x86_64"
  LambdaBracketGetCompetitions:
    Type: "AWS::Lambda::Function"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !Ref LambdaGetCompetitionsName
      MemorySize: 128
      Description: ""
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 3
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "lambda_function.lambda_handler"
      Code:
        ZipFile: |
          def lambda_handler(event, context):
                # upload code via lambda deploy script
                return False
      Layers:
        - !Ref LayerBracketCommon
      Role: !GetAtt RoleBracketRead.Arn 
      FileSystemConfigs: []
      Runtime: "python3.12"
      PackageType: "Zip"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: !Ref LogBracketLambdaGetCompetitions
      EphemeralStorage:
        Size: 512
      Architectures:
      - "x86_64"
  LambdaBracketGetRoundStart:
    Type: "AWS::Lambda::Function"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !Ref LambdaGetRoundStartName
      MemorySize: 128
      Description: ""
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 3
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "lambda_function.lambda_handler"
      Code:
        ZipFile: |
          def lambda_handler(event, context):
                # upload code via lambda deploy script
                return False
      Layers:
        - !Ref LayerBracketCommon
      Role: !GetAtt RoleBracketRead.Arn 
      FileSystemConfigs: []
      Runtime: "python3.12"
      PackageType: "Zip"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: !Ref LogBracketLambdaGetRoundStart
      EphemeralStorage:
        Size: 512
      Architectures:
      - "x86_64"
  LambdaBracketGetScoreboard:
    Type: "AWS::Lambda::Function"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !Ref LambdaGetScoreboardName
      MemorySize: 128
      Description: ""
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 3
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "lambda_function.lambda_handler"
      Code:
        ZipFile: |
          def lambda_handler(event, context):
                # upload code via lambda deploy script
                return False
      Layers:
        - !Ref LayerBracketCommon
      Role: !GetAtt RoleBracketRead.Arn 
      FileSystemConfigs: []
      Runtime: "python3.12"
      PackageType: "Zip"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: !Ref LogBracketLambdaGetScoreboard
      EphemeralStorage:
        Size: 512
      Architectures:
      - "x86_64"
  LambdaBracketSendEmail:
    Type: "AWS::Lambda::Function"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !Ref LambdaSendEmailName
      MemorySize: 128
      Description: ""
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 3
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "lambda_function.lambda_handler"
      Code:
        ZipFile: |
          def lambda_handler(event, context):
                # upload code via lambda deploy script
                return False
      Layers:
        - !Ref LayerBracketCommon
      Role: !GetAtt RoleBracketReadSend.Arn
      FileSystemConfigs: []
      Runtime: "python3.12"
      PackageType: "Zip"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: !Ref LogBracketLambdaSendEmail
      EphemeralStorage:
        Size: 512
      Architectures:
      - "x86_64"
  LambdaBracketUpdatePicks:
    Type: "AWS::Lambda::Function"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !Ref LambdaUpdatePicksName
      MemorySize: 128
      Description: ""
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 3
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "lambda_function.lambda_handler"
      Code:
        ZipFile: |
          def lambda_handler(event, context):
                # upload code via lambda deploy script
                return False
      Layers:
        - !Ref LayerBracketCommon
      Role: !GetAtt RoleBracketReadWrite.Arn 
      FileSystemConfigs: []
      Runtime: "python3.12"
      PackageType: "Zip"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: !Ref LogBracketLambdaUpdatePicks 
      EphemeralStorage:
        Size: 512
      Architectures:
      - "x86_64"
  LambdaBracketUpdateScoreboard:
    Type: "AWS::Lambda::Function"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !Ref LambdaUpdateScoreboardName
      MemorySize: 128
      Description: ""
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 3
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "lambda_function.lambda_handler"
      Code:
        ZipFile: |
          def lambda_handler(event, context):
                # upload code via lambda deploy script
                return False
      Layers:
        - !Ref LayerBracketCommon
      Role: !GetAtt RoleBracketReadWrite.Arn 
      FileSystemConfigs: []
      Runtime: "python3.12"
      PackageType: "Zip"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: !Ref LogBracketLambdaUpdateScoreboard
      EphemeralStorage:
        Size: 512
      Architectures:
      - "x86_64"
  LambdaBracketUserAuth:
    Type: "AWS::Lambda::Function"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !Ref LambdaUserAuthName 
      MemorySize: 128
      Description: ""
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 3
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "lambda_function.lambda_handler"
      Code:
        ZipFile: |
          def lambda_handler(event, context):
                # upload code via lambda deploy script
                return False
      Layers:
        - !Ref LayerBracketCommon
      Role: !GetAtt RoleBracketUserAuth.Arn 
      FileSystemConfigs: []
      Runtime: "python3.12"
      PackageType: "Zip"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: !Ref LogBracketLambdaUserAuth
      EphemeralStorage:
        Size: 512
      Architectures:
      - "x86_64"
  LayerBracketCommon:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      LayerName: !Ref LayerCommonName
      Content:
        S3Bucket: !Ref S3BracketPrivate
        S3Key: !Sub lambdas/empty_layer.zip
      CompatibleRuntimes:
        - "python3.12"
      CompatibleArchitectures:
        - "x86_64"
############################
#### SNS
############################
  SNSTopicBracketEmail:
    Type: "AWS::SNS::Topic"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      TopicName: !Ref SNSTopicEmailName
  SNSSubscriptionBracketEmail:
    Type: "AWS::SNS::Subscription"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      Protocol: "lambda"
      TopicArn: !GetAtt SNSTopicBracketEmail.TopicArn
      Endpoint: !GetAtt LambdaBracketSendEmail.Arn
  SNSTriggerPermissionBracketEmail:
    Type: "AWS::Lambda::Permission"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !GetAtt LambdaBracketSendEmail.Arn
      Action: "lambda:InvokeFunction"
      SourceArn: !GetAtt SNSTopicBracketEmail.TopicArn
      Principal: "sns.amazonaws.com"
  SNSTopicBracketSync:
    Type: "AWS::SNS::Topic"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      TopicName: !Ref SNSTopicSyncName
  SNSSubscriptionBracketSync:
    Type: "AWS::SNS::Subscription"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      Protocol: "lambda"
      TopicArn: !GetAtt SNSTopicBracketSync.TopicArn
      Endpoint: !GetAtt LambdaBracketUpdateScoreboard.Arn
  SNSTriggerPermissionBracketSync:
    Type: "AWS::Lambda::Permission"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !GetAtt LambdaBracketUpdateScoreboard.Arn
      Action: "lambda:InvokeFunction"
      SourceArn: !GetAtt SNSTopicBracketSync.TopicArn
      Principal: "sns.amazonaws.com"
############################
#### IAM
############################
  RoleBracketReadWrite:
    Type: "AWS::IAM::Role"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      - !GetAtt PolicyBracketReadWrite.PolicyArn
      - !GetAtt PolicyBracketPublish.PolicyArn
      MaxSessionDuration: 3600
      RoleName: !Sub "role-lambda-${LambdaReadWritePermissionName}"
      Description: ""
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
  RoleBracketRead:
    Type: "AWS::IAM::Role"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      - !GetAtt PolicyBracketRead.PolicyArn
      MaxSessionDuration: 3600
      RoleName: !Sub "role-lambda-${LambdaReadPermissionName}"
      Description: ""
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
  RoleBracketReadSend:
    Type: "AWS::IAM::Role"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      - !GetAtt PolicyBracketRead.PolicyArn
      - !GetAtt PolicyBracketSend.PolicyArn
      MaxSessionDuration: 3600
      RoleName: !Sub "role-lambda-${LambdaReadSendPermissionName}"
      Description: ""
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
  RoleBracketUserAuth:
    Type: "AWS::IAM::Role"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      - !GetAtt PolicyBracketUserAuth.PolicyArn
      - !GetAtt PolicyBracketPublish.PolicyArn
      - !GetAtt PolicyBracketRead.PolicyArn
      MaxSessionDuration: 3600
      RoleName: !Sub "role-lambda-${LambdaUserAuthPermissionName}"
      Description: ""
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
  RoleBracketAdminEdit:
    Type: "AWS::IAM::Role"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      - !GetAtt PolicyBracketUserAuth.PolicyArn
      - !GetAtt PolicyBracketPublish.PolicyArn
      - !GetAtt PolicyBracketReadWrite.PolicyArn
      MaxSessionDuration: 3600
      RoleName: !Sub "role-lambda-${LambdaAdminEditPermissionName}"
      Description: ""
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
  PolicyBracketReadWrite:
    Type: "AWS::IAM::ManagedPolicy"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "policy-lambda-${LambdaReadWritePermissionName}"
      Path: "/"
      Description: ""
      Groups: []
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource:
          - !GetAtt S3BracketPrivate.Arn
          - !Sub "${S3BracketPrivate.Arn}/*"
          Action:
          - "s3:PutObject"
          - "s3:GetObject"
          - "s3:DeleteObject"
          - "s3:ListBucket"
          Effect: "Allow"
          Sid: "VisualEditor0"
  PolicyBracketPublish:
    Type: "AWS::IAM::ManagedPolicy"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "policy-lambda-${LambdaPublishPermissionName}"
      Path: "/"
      Description: ""
      Groups: []
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource:
          - !GetAtt SNSTopicBracketEmail.TopicArn
          - !GetAtt SNSTopicBracketSync.TopicArn
          Action:
          - "sns:Publish"
          Effect: "Allow"
          Sid: "VisualEditor0"
  PolicyBracketRead:
    Type: "AWS::IAM::ManagedPolicy"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "policy-lambda-${LambdaReadPermissionName}"
      Path: "/"
      Description: ""
      Groups: []
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource:
          - !GetAtt S3BracketPrivate.Arn
          - !Sub "${S3BracketPrivate.Arn}/*"
          Action:
          - "s3:GetObject"
          - "s3:ListBucket"
          Effect: "Allow"
          Sid: "VisualEditor0"
  PolicyBracketSend:
    Type: "AWS::IAM::ManagedPolicy"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "policy-lambda-${LambdaSendPermissionName}"
      Path: "/"
      Description: ""
      Groups: []
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Resource: !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/${SesIdentity}"
          Action: "ses:SendEmail"
          Effect: "Allow"
          Sid: "VisualEditor0"
  PolicyBracketUserAuth:
    Type: "AWS::IAM::ManagedPolicy"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "policy-lambda-${LambdaUserAuthPermissionName}"
      Path: "/"
      Description: ""
      Groups: []
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*"
          Action:
          - "cognito-idp:AdminGetUser"
          - "cognito-idp:AdminUpdateUserAttributes"
          - "cognito-idp:AdminListGroupsForUser"
          - "cognito-idp:ListUsers"
          - "cognito-idp:GetUser"
          Effect: "Allow"
          Sid: "VisualEditor0"
############################
#### S3
############################
  S3BracketPublic:
    Type: "AWS::S3::Bucket"
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        BlockPublicAcls: true
      BucketName: !Ref PublicBucketName 
      OwnershipControls:
        Rules:
        - ObjectOwnership: "BucketOwnerEnforced" 
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: false
          ServerSideEncryptionByDefault:
            SSEAlgorithm: "AES256"
  S3BracketPrivate:
    Type: "AWS::S3::Bucket"
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        BlockPublicAcls: true
      BucketName: !Ref PrivateBucketName 
      OwnershipControls:
        Rules:
        - ObjectOwnership: "BucketOwnerEnforced"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: false
          ServerSideEncryptionByDefault:
            SSEAlgorithm: "AES256"
############################
#### API
############################
  ApiGatewayBracket:
    Type: "AWS::ApiGatewayV2::Api"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      Name: !Ref ApiName
      RouteSelectionExpression: "$request.method $request.path"
      DisableExecuteApiEndpoint: false
      CorsConfiguration:
        MaxAge: 1
        AllowOrigins:
        - "*"
        AllowCredentials: false
        ExposeHeaders: []
        AllowMethods:
        - "*"
        AllowHeaders:
        - "*"
      ProtocolType: "HTTP"
      Tags: {}
  ApiStageBracket:
    Type: "AWS::ApiGatewayV2::Stage"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBracket
      StageName: "$default"
      AutoDeploy: true
  ApiRouteBracketAddElement:
    Type: "AWS::ApiGatewayV2::Route"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBracket
      RouteKey: !Sub "PUT /add"
      Target: !Join ["/", ["integrations", !Ref ApiIntegrationBracketAddElement]]
  ApiIntegrationBracketAddElement:
    Type: "AWS::ApiGatewayV2::Integration"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBracket
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      IntegrationUri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBracketAddElement.Arn}/invocations"
      PayloadFormatVersion: "2.0"
  ApiTriggerPermissionBracketAddElement:
    Type: "AWS::Lambda::Permission"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !GetAtt LambdaBracketAddElement.Arn
      Action: "lambda:InvokeFunction"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayBracket}/*/*/add"
      Principal: "apigateway.amazonaws.com"
  ApiRouteBracketGetBracket:
    Type: "AWS::ApiGatewayV2::Route"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBracket
      RouteKey: !Sub "GET /bracket"
      Target: !Join ["/", ["integrations", !Ref ApiIntegrationBracketGetBracket]]
  ApiIntegrationBracketGetBracket:
    Type: "AWS::ApiGatewayV2::Integration"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBracket
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      IntegrationUri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBracketGetBracket.Arn}/invocations"
      PayloadFormatVersion: "2.0"
  ApiTriggerPermissionBracketGetBracket:
    Type: "AWS::Lambda::Permission"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !GetAtt LambdaBracketGetBracket.Arn
      Action: "lambda:InvokeFunction"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayBracket}/*/*/bracket"
      Principal: "apigateway.amazonaws.com"
  ApiRouteBracketGetCompetitions:
    Type: "AWS::ApiGatewayV2::Route"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBracket
      RouteKey: !Sub "GET /competitions"
      Target: !Join ["/", ["integrations", !Ref ApiIntegrationBracketGetCompetitions]]
  ApiIntegrationBracketGetCompetitions:
    Type: "AWS::ApiGatewayV2::Integration"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBracket
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      IntegrationUri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBracketGetCompetitions.Arn}/invocations"
      PayloadFormatVersion: "2.0"
  ApiTriggerPermissionBracketGetCompetitions:
    Type: "AWS::Lambda::Permission"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !GetAtt LambdaBracketGetCompetitions.Arn
      Action: "lambda:InvokeFunction"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayBracket}/*/*/competitions"
      Principal: "apigateway.amazonaws.com"
  ApiRouteBracketGetRoundStart:
    Type: "AWS::ApiGatewayV2::Route"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBracket
      RouteKey: !Sub "GET /start"
      Target: !Join ["/", ["integrations", !Ref ApiIntegrationBracketGetRoundStart]]
      AuthorizationType: "CUSTOM"
      AuthorizerId: !Ref ApiAuthorizerBracketUserAuth
  ApiIntegrationBracketGetRoundStart:
    Type: "AWS::ApiGatewayV2::Integration"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBracket
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      IntegrationUri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBracketGetRoundStart.Arn}/invocations"
      PayloadFormatVersion: "2.0"
  ApiTriggerPermissionBracketGetRoundStart:
    Type: "AWS::Lambda::Permission"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !GetAtt LambdaBracketGetRoundStart.Arn
      Action: "lambda:InvokeFunction"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayBracket}/*/*/start"
      Principal: "apigateway.amazonaws.com"
  ApiRouteBracketGetScoreboard:
    Type: "AWS::ApiGatewayV2::Route"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBracket
      RouteKey: !Sub "GET /scoreboard"
      Target: !Join ["/", ["integrations", !Ref ApiIntegrationBracketGetScoreboard]]
  ApiIntegrationBracketGetScoreboard:
    Type: "AWS::ApiGatewayV2::Integration"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBracket
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      IntegrationUri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBracketGetScoreboard.Arn}/invocations"
      PayloadFormatVersion: "2.0"
  ApiTriggerPermissionBracketGetScoreboard:
    Type: "AWS::Lambda::Permission"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !GetAtt LambdaBracketGetScoreboard.Arn
      Action: "lambda:InvokeFunction"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayBracket}/*/*/scoreboard"
      Principal: "apigateway.amazonaws.com"
  ApiRouteBracketUpdatePicks:
    Type: "AWS::ApiGatewayV2::Route"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBracket
      RouteKey: !Sub "POST /picks"
      Target: !Join ["/", ["integrations", !Ref ApiIntegrationBracketUpdatePicks]]
      AuthorizationType: "CUSTOM"
      AuthorizerId: !Ref ApiAuthorizerBracketUserAuth
  ApiIntegrationBracketUpdatePicks:
    Type: "AWS::ApiGatewayV2::Integration"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBracket
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      IntegrationUri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBracketUpdatePicks.Arn}/invocations"
      PayloadFormatVersion: "2.0"
  ApiTriggerPermissionBracketUpdatePicks:
    Type: "AWS::Lambda::Permission"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !GetAtt LambdaBracketUpdatePicks.Arn
      Action: "lambda:InvokeFunction"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayBracket}/*/*/picks"
      Principal: "apigateway.amazonaws.com"
  ApiRouteBracketUpdateScoreboard:
    Type: "AWS::ApiGatewayV2::Route"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBracket
      RouteKey: !Sub "GET /sync"
      Target: !Join ["/", ["integrations", !Ref ApiIntegrationBracketUpdateScoreboard]]
  ApiIntegrationBracketUpdateScoreboard:
    Type: "AWS::ApiGatewayV2::Integration"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBracket
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      IntegrationUri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBracketUpdateScoreboard.Arn}/invocations"
      PayloadFormatVersion: "2.0"
  ApiTriggerPermissionBracketUpdateScoreboard:
    Type: "AWS::Lambda::Permission"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !GetAtt LambdaBracketUpdateScoreboard.Arn
      Action: "lambda:InvokeFunction"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayBracket}/*/*/sync"
      Principal: "apigateway.amazonaws.com"
  ApiRouteBracketAdminEdit:
    Type: "AWS::ApiGatewayV2::Route"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBracket
      RouteKey: !Sub "POST /admin"
      Target: !Join ["/", ["integrations", !Ref ApiIntegrationBracketAdminEdit]]
  ApiIntegrationBracketAdminEdit:
    Type: "AWS::ApiGatewayV2::Integration"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBracket
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      IntegrationUri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBracketAdminEdit.Arn}/invocations"
      PayloadFormatVersion: "2.0"
  ApiTriggerPermissionBracketAdminEdit:
    Type: "AWS::Lambda::Permission"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !GetAtt LambdaBracketAdminEdit.Arn
      Action: "lambda:InvokeFunction"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayBracket}/*/*/admin"
      Principal: "apigateway.amazonaws.com"
  ApiAuthorizerBracketUserAuth:
    Type: "AWS::ApiGatewayV2::Authorizer"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBracket
      Name: !Ref LambdaBracketUserAuth
      AuthorizerType: "REQUEST"
      AuthorizerUri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBracketUserAuth.Arn}/invocations"
      AuthorizerPayloadFormatVersion: "2.0"
      EnableSimpleResponses: true
      IdentitySource: 
      - "$request.header.Authorization"
  ApiTriggerPermissionBracketUserAuth:
    Type: "AWS::Lambda::Permission"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !GetAtt LambdaBracketUserAuth.Arn
      Action: "lambda:InvokeFunction"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayBracket}/authorizers/${ApiAuthorizerBracketUserAuth}"
      Principal: "apigateway.amazonaws.com"
############################
#### CloudFront 
############################
  CloudFrontDistroBracket:
    Type: "AWS::CloudFront::Distribution"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      DistributionConfig:
        DefaultRootObject: "index.html"
        Origins:
          #- OriginAccessControlId: !Ref CloudFrontOACBracket
        - OriginAccessControlId: "EWO8FEYV4CJHK" # TODO 
          DomainName: !GetAtt S3BracketPublic.RegionalDomainName
          S3OriginConfig:
            OriginAccessIdentity: ""
          Id: !GetAtt S3BracketPublic.RegionalDomainName
        ViewerCertificate:
          MinimumProtocolVersion: "TLSv1.2_2021"
          SslSupportMethod: "sni-only"
          AcmCertificateArn: !Sub "arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${AcmSSLCertificateId}"
        DefaultCacheBehavior:
          Compress: true
          AllowedMethods:
          - "HEAD"
          - "GET"
          CachedMethods:
          - "HEAD"
          - "GET"
          TargetOriginId: !GetAtt S3BracketPublic.RegionalDomainName 
          ViewerProtocolPolicy: "redirect-to-https"
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
        Staging: false
        Enabled: true
        Aliases:
        - !Ref DeployedRootURL 
        IPV6Enabled: true
        HttpVersion: "http2"
        #  CloudFrontOACBracket:
        #Type: "AWS::CloudFront::OriginAccessControl"
        #UpdateReplacePolicy: "Delete"
        #DeletionPolicy: "Delete"
        #Properties:
        #OriginAccessControlConfig:
        #SigningBehavior: "always"
        #Description: ""
        #SigningProtocol: "sigv4"
        #OriginAccessControlOriginType: "s3"
        #Name: !GetAtt S3BracketPublic.RegionalDomainName
  S3BucketPolicyBracket:
    Type: "AWS::S3::BucketPolicy"
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      Bucket: !Ref S3BracketPublic
      PolicyDocument:
        Version: "2008-10-17"
        Statement:
        - Condition:
            StringEquals:
              AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistroBracket.Id}" 
          Resource: !Sub "${S3BracketPublic.Arn}/*"
          Action: "s3:GetObject"
          Effect: "Allow"
          Principal:
            Service: "cloudfront.amazonaws.com"
          Sid: "AllowCloudFrontServicePrincipal"
        Id: "PolicyForCloudFrontPrivateContent"
############################
#### Route53 
############################
  Route53ARecordBracket:
    Type: "AWS::Route53::RecordSet"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      Type: "A"
      Name: !Ref DeployedRootURL
      HostedZoneId: !Ref HostedZoneId
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistroBracket.DomainName
        HostedZoneId: "Z2FDTNDATAQYW2"
  Route53AAAARecordBracket:
    Type: "AWS::Route53::RecordSet"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      Type: "AAAA"
      Name: !Ref DeployedRootURL 
      HostedZoneId: !Ref HostedZoneId
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistroBracket.DomainName
        HostedZoneId: "Z2FDTNDATAQYW2" # TODO: replace this with param
############################
#### Cognito
############################
  CognitoBLRUserPool:
    Type: "AWS::Cognito::UserPool"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      UserPoolName: !Ref CognitoUserPoolName
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: given_name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: is_admin
          AttributeDataType: Boolean
          Mutable: true
          Required: false
        - Name: custom:is_admin
          AttributeDataType: Boolean
          Mutable: true
          Required: false
      LambdaConfig:
        CreateAuthChallenge: !GetAtt LambdaBracketUserAuth.Arn
        DefineAuthChallenge: !GetAtt LambdaBracketUserAuth.Arn
        PostAuthentication: !GetAtt LambdaBracketUserAuth.Arn
        PreSignUp: !GetAtt LambdaBracketUserAuth.Arn
        VerifyAuthChallengeResponse: !GetAtt LambdaBracketUserAuth.Arn
  CognitoBLRUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      UserPoolId: !Ref CognitoBLRUserPool
      ClientName: !Sub "${CognitoUserPoolName}-client"
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: LEGACY
      AuthSessionValidity: 3
      RefreshTokenValidity: 1000
      AccessTokenValidity: 1
      IdTokenValidity: 1
      TokenValidityUnits:
        RefreshToken: days
        IdToken: hours
        AccessToken: hours
  CognitoBLRAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: !Sub ${CognitoAdminGroupName}
      UserPoolId: !Ref CognitoBLRUserPool
  CognitoLambdaTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaBracketUserAuth.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoBLRUserPool.Arn
############################
#### Logs 
############################
  LogBracketLambdaAddElement:
    Type: "AWS::Logs::LogGroup"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaAddElementName}"
      RetentionInDays: 7
  LogBracketLambdaAdminEdit:
    Type: "AWS::Logs::LogGroup"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaAdminEditName}"
      RetentionInDays: 7
  LogBracketLambdaGetBracket:
    Type: "AWS::Logs::LogGroup"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaGetBracketName}"
      RetentionInDays: 7
  LogBracketLambdaGetCompetitions:
    Type: "AWS::Logs::LogGroup"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaGetCompetitionsName}"
      RetentionInDays: 7
  LogBracketLambdaGetRoundStart:
    Type: "AWS::Logs::LogGroup"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaGetRoundStartName}"
      RetentionInDays: 7
  LogBracketLambdaGetScoreboard:
    Type: "AWS::Logs::LogGroup"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaGetScoreboardName}"
      RetentionInDays: 7
  LogBracketLambdaSendEmail:
    Type: "AWS::Logs::LogGroup"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaSendEmailName}"
      RetentionInDays: 7
  LogBracketLambdaUpdatePicks:
    Type: "AWS::Logs::LogGroup"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaUpdatePicksName}"
      RetentionInDays: 7
  LogBracketLambdaUpdateScoreboard:
    Type: "AWS::Logs::LogGroup"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaUpdateScoreboardName}"
      RetentionInDays: 7
  LogBracketLambdaUserAuth:
    Type: "AWS::Logs::LogGroup"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaUserAuthName}"
      RetentionInDays: 7

